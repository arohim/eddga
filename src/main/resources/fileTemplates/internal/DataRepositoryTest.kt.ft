#if (${PACKAGE_NAME} && ${PACKAGE_NAME} != "") package ${PACKAGE_NAME}#end

import com.app.kaidee.data.shared.HeaderFactory
import com.app.kaidee.data.shared.mapper.HeaderMapper
import com.app.kaidee.data.shared.model.HeaderEntity
import com.app.kaidee.domain.shared.model.Header
import com.nhaarman.mockito_kotlin.mock
import com.nhaarman.mockito_kotlin.whenever
import io.reactivex.Single
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith
import org.junit.runners.JUnit4

@RunWith(JUnit4::class)
#parse("File Header.java")
class ${CLASS_NAME}DataRepositoryTest {

    private lateinit var repository: ${CLASS_NAME}DataRepository

    lateinit var factory: ${CLASS_NAME}DataStoreFactory

    lateinit var responseMapper: ${CLASS_NAME}Mapper

    lateinit var headerMapper: HeaderMapper

    lateinit var cache: ${CLASS_NAME}CacheDataStore

    lateinit var remote: ${CLASS_NAME}RemoteDataRepositoryDataStore

    @Before
    fun setUp() {
        remote = mock()
        cache = mock()
        factory = mock()
        responseMapper = mock()
        headerMapper = mock()
        repository = ${CLASS_NAME}DataRepository(factory, responseMapper, headerMapper)
    }

    @Test
    fun `Get ${CLASS_NAME}`() {
        // GIVEN
        val domain = make${CLASS_NAME}(2)
        val entity = make${CLASS_NAME}Entity(2)
        stub${CLASS_NAME}CacheDataStoreGetList(Single.just(entity))
        stub${CLASS_NAME}ResponseMapperMapFromEntity(entity, domain)
        stubHeaderMapperMapToEntity(makeHeaderEntity(), HeaderFactory.makeHeader())

        // WHEN
        val testObserver = repository.getList(listOf()).test()

        // THEN
        testObserver.assertValue(domain)
    }

    private fun stubRemoteDataStore() {
        whenever(factory.retrieveRemote()).thenReturn(remote)
    }

    private fun stubCacheDataStore() {
        whenever(factory.retrieveCache()).thenReturn(cache)
    }

    private fun stub${CLASS_NAME}CacheDataStoreGetList(single: Single<${CLASS_NAME}Entity>) {
        whenever(factory.getList(listOf())).thenReturn(single)
    }

    private fun stub${CLASS_NAME}MapperMapFromEntity(mapperEntity: ${CLASS_NAME}Entity,
                                                        response: ${CLASS_NAME}Response) {
        whenever(responseMapper.mapFromEntity(mapperEntity)).thenReturn(response)
    }

    private fun stubHeaderMapperMapToEntity(entity: HeaderEntity, domain: Header) {
        whenever(headerMapper.mapFromEntity(entity)).thenReturn(domain)
    }
}