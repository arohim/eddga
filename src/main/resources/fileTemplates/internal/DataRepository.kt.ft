#if (${PACKAGE_NAME} && ${PACKAGE_NAME} != "") package ${PACKAGE_NAME}#end

import com.app.kaidee.data.shared.mapper.HeaderMapper
import com.app.kaidee.domain.shared.model.Header
import io.reactivex.Single
import javax.inject.Inject

open class ${CLASS_NAME}DataRepository @Inject constructor(
        private val factory: ${CLASS_NAME}DataStoreFactory,
        private val mapper: ${CLASS_NAME}Mapper,
        private val headerMapper: HeaderMapper)
    : ${CLASS_NAME}Repository {

    /**
    override fun clearBufferoos(): Completable {
        return factory.retrieveCacheDataStore().clearBufferoos()
    }

    override fun saveBufferoos(bufferoos: List<Bufferoo>): Completable {
        val bufferooEntities = bufferoos.map { bufferooMapper.mapToEntity(it) }
        return saveBufferooEntities(bufferooEntities)
    }

    private fun saveBufferooEntities(bufferoos: List<BufferooEntity>): Completable {
            return factory.retrieveCacheDataStore().saveBufferoos(bufferoos)
    }

    override fun getBufferoos(headers: List<Header>): Single<List<Bufferoo>> {
        val dataStore = factory.retrieveDataStore()
        val headerEntity = headers.map { headerMapper.mapToEntity(it) }
        return dataStore.getBufferoos(headerEntity)
                .flatMap {
                    if (dataStore is BufferooRemoteDataStore) {
                        saveBufferooEntities(it).toSingle { it }
                    } else {
                        Single.just(it)
                    }
                }
                .map { list ->
                    list.map { listItem ->
                        bufferooMapper.mapFromEntity(listItem)
                    }
                }
    }

    **/

    fun getList(headers: List<HeaderModel>): Single<${CLASS_NAME}> {
        val headerEntity = headers.map { headerMapper.mapToEntity(it) }
        return factory.retrieveRemoteDataStore().getList(headerEntity)
               .map {
                    mapper.mapFromEntity(it)
               }
    }
}