#if (${PACKAGE_NAME} && ${PACKAGE_NAME} != "") package ${PACKAGE_NAME}#end

import com.app.kaidee.domain.base.interactor.SingleUseCase
import io.reactivex.Single
import com.app.kaidee.domain.base.executor.PostExecutionThread
import com.app.kaidee.domain.base.executor.ThreadExecutor
import com.app.kaidee.domain.shared.model.Request
import javax.inject.Inject

#parse("File Header.java")
class ${CLASS_NAME} @Inject constructor(private val repository: ${CLASS_NAME}Repository,
                                            threadExecutor: ThreadExecutor,
                                            postExecutionThread: PostExecutionThread) :
        SingleUseCase<${CLASS_NAME}, Request<Void?>>(threadExecutor, postExecutionThread) {

    public override fun buildUseCaseObservable(params: Request<Void?>): Single<${CLASS_NAME}> {
        return repository.getList(params.headers)
    }
}